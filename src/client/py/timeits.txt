# vim: set tw=160

### sleep1x60
python \
-m timeit \
-r 1 \
-n 5 \
-s '
import sys
sys.path.append("/Users/livewire/PDCS/Thesis/thrift/lib/py/build/lib.macosx-10.6-x86_64-2.6/")
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
sys.path.append("/Users/livewire/PDCS/Thesis/onesagaforall/src/thrift/gen-py")
from org.ogf.saga.thrift import SAGAService
from org.ogf.saga.thrift.constants import TJobDescription

transport = TSocket.TSocket("localhost", 9090)
transport = TTransport.TBufferedTransport(transport)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
clnt = SAGAService.Client(protocol)
try:
  transport.open()
except TTransport.TTransportException, e:
  print "Problem connecting to OSfA server: %s. Exiting." % e
  sys.exit(1)

clnt.login("admin", "password")
' \
'
jd = clnt.JobDescriptionCreate()
clnt.JobDescriptionSetAttribute(jd, TJobDescription["EXECUTABLE"], "/bin/sleep")
clnt.JobDescriptionSetVectorAttribute(jd, TJobDescription["ARGUMENTS"], ["60"])
js = clnt.JobServiceCreateDefault()
j = clnt.JobServiceCreateJob(js, jd)
clnt.JobRun(j)
clnt.JobWaitFor(j)
clnt.freeAll()
'

### sleep60x1
python \
-m timeit \
-r 1 \
-n 5 \
-s '
import sys
sys.path.append("/Users/livewire/PDCS/Thesis/thrift/lib/py/build/lib.macosx-10.6-x86_64-2.6/")
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
sys.path.append("/Users/livewire/PDCS/Thesis/onesagaforall/src/thrift/gen-py")
from org.ogf.saga.thrift import SAGAService
from org.ogf.saga.thrift.constants import TJobDescription

transport = TSocket.TSocket("localhost", 9090)
transport = TTransport.TBufferedTransport(transport)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
clnt = SAGAService.Client(protocol)
try:
  transport.open()
except TTransport.TTransportException, e:
  print "Problem connecting to OSfA server: %s. Exiting." % e
  sys.exit(1)

clnt.login("admin", "password")
' \
'
for _ in range(60):
  jd = clnt.JobDescriptionCreate()
  clnt.JobDescriptionSetAttribute(jd, TJobDescription["EXECUTABLE"], "/bin/sleep")
  clnt.JobDescriptionSetVectorAttribute(jd, TJobDescription["ARGUMENTS"], ["1"])
  js = clnt.JobServiceCreateDefault()
  j = clnt.JobServiceCreateJob(js, jd)
  clnt.JobRun(j)
  clnt.JobWaitFor(j)
  clnt.freeAll()
'

### file
mkdir /tmp/basedir && \
python \
-m timeit \
-n 5 \
-s '
import sys
sys.path.append("/Users/livewire/PDCS/Thesis/thrift/lib/py/build/lib.macosx-10.6-x86_64-2.6/")
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
sys.path.append("/Users/livewire/PDCS/Thesis/onesagaforall/src/thrift/gen-py")
from org.ogf.saga.thrift import SAGAService
from org.ogf.saga.thrift.ttypes import TFlags
from org.ogf.saga.thrift.ttypes import TTaskMode

transport = TSocket.TSocket("localhost", 9090)
transport = TTransport.TBufferedTransport(transport)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
clnt = SAGAService.Client(protocol)
try:
  transport.open()
except TTransport.TTransportException, e:
  print "Problem connecting to OSfA server: %s. Exiting." % e
  sys.exit(1)

clnt.login("admin", "password")
write_buf_size = 1024 * 32
read_buf_size = 1024 * 32
big_file_size = 1024 * 1024 * 100
write_buf = "0" * write_buf_size
' \
'
s = clnt.SessionCreate(True)
ubase = clnt.URLCreate("file://localhost/tmp/basedir")
dbase = clnt.DirectoryCreate(s, ubase, TFlags.READ)
ufoo = clnt.URLCreate("foo")
f = clnt.DirectoryOpenFile(dbase, ufoo, TFlags.CREATE)
b = clnt.BufferCreate(write_buf_size)
clnt.BufferSetData(b, write_buf)
written = 0
while written < big_file_size:
  written += clnt.FileWrite(f, b)

clnt.FileClose(f)

ubar = clnt.URLCreate("bar")
clnt.DirectoryCopy(dbase, ufoo, ubar, TFlags.NONE)

fbar = clnt.DirectoryOpenFile(dbase, ubar, TFlags.READ)
bbar = clnt.BufferCreate(write_buf_size)
read = 1
while read > 0:
  read = clnt.FileRead(fbar, bbar)

clnt.FileClose(fbar)

clnt.DirectoryRemove2(dbase, "*", TFlags.RECURSIVE)
clnt.DirectoryClose(dbase)
clnt.freeAll()
' \
&& rmdir /tmp/basedir

### namespace
mkdir /tmp/basedir && \
python \
-m timeit \
-n 5 \
-s '
import sys
sys.path.append("/Users/livewire/PDCS/Thesis/thrift/lib/py/build/lib.macosx-10.6-x86_64-2.6/")
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
sys.path.append("/Users/livewire/PDCS/Thesis/onesagaforall/src/thrift/gen-py")
from org.ogf.saga.thrift import SAGAService
from org.ogf.saga.thrift.ttypes import TFlags
from org.ogf.saga.thrift.ttypes import TTaskMode

transport = TSocket.TSocket("localhost", 9090)
transport = TTransport.TBufferedTransport(transport)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
clnt = SAGAService.Client(protocol)
try:
  transport.open()
except TTransport.TTransportException, e:
  print "Problem connecting to OSfA server: %s. Exiting." % e
  sys.exit(1)

clnt.login("admin", "password")
dir_count = 10
subdir_count = 10
file_count = 10

' \
'
def list_dir(clnt, d):
  for entry in clnt.DirectoryList(d, "."):
    if clnt.DirectoryIsEntry(d, entry):
      clnt.DirectoryGetSize(d, entry)
      #clnt.free(clnt.DirectoryGetURL(d))
    else:
      #clnt.free(clnt.DirectoryGetURL(d))
      subdir = clnt.DirectoryOpenDirectory(d, entry, TFlags.READ)
      list_dir(clnt, subdir)
      clnt.DirectoryClose(subdir)
    clnt.free(entry)

s = clnt.SessionCreate(True)
ubase = clnt.URLCreate("local://localhost/tmp/basedir")
nsdbase = clnt.NSDirectoryCreate(s, ubase, TFlags.NONE)

for i in range(0, dir_count):
  durl = clnt.URLCreate("dir%03d" % i)
  clnt.NSDirectoryMakeDir(nsdbase, durl)
  clnt.free(durl)

for uentry in clnt.NSDirectoryList(nsdbase, "."):
  d = clnt.NSDirectoryOpenDir(nsdbase, uentry, TFlags.READ)
  for j in range(0, subdir_count):
    subdurl = clnt.URLCreate("subdir%03d" % j)
    clnt.NSDirectoryMakeDir(d, subdurl)
    clnt.free(subdurl)
  clnt.NSDirectoryClose(d)

for uentry in clnt.NSDirectoryList(nsdbase, "."):
  d = clnt.NSDirectoryOpenDir(nsdbase, uentry, TFlags.READ)
  for usubentry in clnt.NSDirectoryList(d, "."):
    subdir = clnt.NSDirectoryOpenDir(d, usubentry, TFlags.READ)
    for i in range(0, file_count):
      furl = clnt.URLCreate("file%03d" % i)
      f = clnt.NSDirectoryOpen(subdir, furl, TFlags.CREATE)
      clnt.NSEntryClose(f)
      clnt.free(furl)
    clnt.NSDirectoryClose(subdir)
    clnt.free(usubentry)
  clnt.NSDirectoryClose(d)
  clnt.free(uentry)

d = clnt.DirectoryCreate(s, ubase, TFlags.READ)
list_dir(clnt, d)
clnt.DirectoryClose(d)

# move all directories 'dirXXX' to 'dXXX'
for i in range(0, dir_count):
  from_url = clnt.URLCreate("dir%03d" % i)
  to_url = clnt.URLCreate("d%03d" % i)
  clnt.NSDirectoryMove(nsdbase, from_url, to_url, TFlags.RECURSIVE)
  clnt.free(from_url)
  clnt.free(to_url)

# copy all files 'fileXXX' to 'fXXX'
for uentry in clnt.NSDirectoryList(nsdbase, "."):
  d = clnt.NSDirectoryOpenDir(nsdbase, uentry, TFlags.READ)
  for usubentry in clnt.NSDirectoryList(d, "."):
    subdir = clnt.NSDirectoryOpenDir(d, usubentry, TFlags.READ)
    clnt.free(clnt.NSDirectoryGetURL(subdir))
    for name_url in clnt.NSDirectoryList(subdir, "."):
      new_name = clnt.URLGetString(name_url).replace("file", "f", 1)
      new_name_url = clnt.URLCreate(new_name.encode())
      clnt.NSDirectoryCopy(subdir, name_url, new_name_url, TFlags.NONE)
      clnt.free(new_name_url)
      clnt.free(name_url)
    clnt.NSDirectoryClose(subdir)
    clnt.free(usubentry)
  clnt.NSDirectoryClose(d)
  clnt.free(uentry)

# delete all files and directories
for uentry in clnt.NSDirectoryList(nsdbase, "."):
  clnt.NSDirectoryRemove(nsdbase, uentry, TFlags.RECURSIVE)

clnt.free(uentry)
clnt.NSDirectoryClose(nsdbase)

print clnt.freeAll()
' \
&& rmdir /tmp/basedir
